/******/

// webpackBootstrap

// install a JSONP callback for chunk loading

// add entry modules from loaded chunk to deferred list

// run deferred modules when all chunks ready

// The module cache

// object to store loaded and loading chunks

// undefined = chunk not loaded, null = chunk preloaded/prefetched

// Promise = chunk loading, 0 = chunk loaded

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// expose the modules object (__webpack_modules__)

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

// add entry module to deferred list

// run deferred modules when ready

/************************************************************************/

/* 0 */

/* 1 */

/* 2 */

/* 3 */

/* 4 */

/***/

/* 5 */

/* harmony import */

/* 6 */

/* WEBPACK VAR INJECTION */

/* jqBootstrapValidation
 * A plugin for automating validation on Twitter Bootstrap formatted forms.
 *
 * v1.3.6
 *
 * License: MIT <http://opensource.org/licenses/mit-license.php> - see LICENSE file
 *
 * http://ReactiveRaven.github.com/jqBootstrapValidation/
 */

// sniff for 'required', 'maxlength', etc

// stop the form submit event from firing if validation fails

// function called if there is an error when trying to submit

// function called just before a successful submit event is sent to the server

// set to true to tidy up generated HTML output

// return $(this).is(":visible"); // only validate elements you can see

// validate everything

// Get references to everything we're interested in

// =============================================================

//                                     SNIFF HTML FOR VALIDATORS

// *snort sniff snuffle*

// create message container if not exists

// ---------------------------------------------------------

//                                                   PATTERN

//                                                       MAX

//                                                       MIN

//                                                 MAXLENGTH

//                                                 MINLENGTH

//                                                  REQUIRED

//                                                    NUMBER

//                                                     EMAIL

//                                                MINCHECKED

//                                                MAXCHECKED

//                                       COLLECT VALIDATOR NAMES

// Get named validators

// Get extra ones defined on the element's data attributes

//                                     NORMALISE VALIDATOR NAMES

// Uppercase only the first letter of each name

// Remove duplicate validator names

// Pull out the new validator names from each shortcut

// Are these custom validators?

// Pull them out!

// Is this a recognised built-in?

// Pull it out!

//                                       SET UP VALIDATOR ARRAYS

// Set up the 'override' message

//                                         STORE FALLBACK VALUES

//                                                    VALIDATION

// Get a list of the errors to apply

//                                             WATCH FOR CHANGES

// Were there any errors?

// Better flag it up as a warning.

// How many errors did we find?

// Only one? Being strict? Just output it.

// Multiple? Being sloppy? Glue them together into an UL.

// remove our events

// events are namespaced.

// reset help text

// reset classes

// reset aria

// reset role

// remove all elements we created

/**
     * Thanks to Jason Bunting via StackOverflow.com
     *
     * http://stackoverflow.com/questions/359788/how-to-execute-a-javascript-function-when-i-have-its-name-as-a-string#answer-359910
     * Short link: http://tinyurl.com/executeFunctionByName
     **/

/* , args*/

// Timeout is set to avoid problems with the events being considered 'already fired'

// Extract the value we're talking about

/* 7 */

// Contact Form Scripts

// additional error messages or events

// prevent default submit behaviour

// get values from FORM

// For Success/Failure Message

// Check for white space in name for Success/Fail message

// Success message

// clear all fields

// Fail message

/* When clicking on Full hide fail/success boxes */
